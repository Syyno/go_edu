// Code generated by mockery v2.36.0. DO NOT EDIT.

package repository

import (
	context "context"
	DTOuser "users/internal/DTO/user"

	mock "github.com/stretchr/testify/mock"

	user "users/internal/domain/user"
)

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, userDomain
func (_m *MockUserRepository) Create(ctx context.Context, userDomain user.UserDomain) (int64, error) {
	ret := _m.Called(ctx, userDomain)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, user.UserDomain) (int64, error)); ok {
		return rf(ctx, userDomain)
	}
	if rf, ok := ret.Get(0).(func(context.Context, user.UserDomain) int64); ok {
		r0 = rf(ctx, userDomain)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, user.UserDomain) error); ok {
		r1 = rf(ctx, userDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - userDomain user.UserDomain
func (_e *MockUserRepository_Expecter) Create(ctx interface{}, userDomain interface{}) *MockUserRepository_Create_Call {
	return &MockUserRepository_Create_Call{Call: _e.mock.On("Create", ctx, userDomain)}
}

func (_c *MockUserRepository_Create_Call) Run(run func(ctx context.Context, userDomain user.UserDomain)) *MockUserRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(user.UserDomain))
	})
	return _c
}

func (_c *MockUserRepository_Create_Call) Return(_a0 int64, _a1 error) *MockUserRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_Create_Call) RunAndReturn(run func(context.Context, user.UserDomain) (int64, error)) *MockUserRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockUserRepository) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUserRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockUserRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockUserRepository_Delete_Call {
	return &MockUserRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockUserRepository_Delete_Call) Run(run func(ctx context.Context, id int64)) *MockUserRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUserRepository_Delete_Call) Return(_a0 error) *MockUserRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_Delete_Call) RunAndReturn(run func(context.Context, int64) error) *MockUserRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockUserRepository) Get(ctx context.Context, id int64) (*user.UserDomain, error) {
	ret := _m.Called(ctx, id)

	var r0 *user.UserDomain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*user.UserDomain, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *user.UserDomain); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UserDomain)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockUserRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockUserRepository_Expecter) Get(ctx interface{}, id interface{}) *MockUserRepository_Get_Call {
	return &MockUserRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockUserRepository_Get_Call) Run(run func(ctx context.Context, id int64)) *MockUserRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUserRepository_Get_Call) Return(_a0 *user.UserDomain, _a1 error) *MockUserRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_Get_Call) RunAndReturn(run func(context.Context, int64) (*user.UserDomain, error)) *MockUserRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, userDomain
func (_m *MockUserRepository) Update(ctx context.Context, userDomain DTOuser.UserUpdate) error {
	ret := _m.Called(ctx, userDomain)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, DTOuser.UserUpdate) error); ok {
		r0 = rf(ctx, userDomain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUserRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - userDomain DTOuser.UserUpdate
func (_e *MockUserRepository_Expecter) Update(ctx interface{}, userDomain interface{}) *MockUserRepository_Update_Call {
	return &MockUserRepository_Update_Call{Call: _e.mock.On("Update", ctx, userDomain)}
}

func (_c *MockUserRepository_Update_Call) Run(run func(ctx context.Context, userDomain DTOuser.UserUpdate)) *MockUserRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DTOuser.UserUpdate))
	})
	return _c
}

func (_c *MockUserRepository_Update_Call) Return(_a0 error) *MockUserRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_Update_Call) RunAndReturn(run func(context.Context, DTOuser.UserUpdate) error) *MockUserRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
